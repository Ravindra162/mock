// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id            Int            @id @default(autoincrement())
  username      String         @unique
  email         String         @unique
  passwordHash  String
  createdAt     DateTime       @default(now())
  lastLogin     DateTime?
  isActive      Boolean        @default(true)
  createdExams  Exam[]        @relation("ExamCreator")
  attempts      ExamAttempt[]
  roles         UserRole[]
  
  @@map("users")
}

model Role {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  users     UserRole[]
  
  @@map("roles")
}

model UserRole {
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    Int

  @@id([userId, roleId])
  @@map("user_roles")
}

model Exam {
  id              Int           @id @default(autoincrement())
  title           String
  description     String?
  totalTimeLimit  Int           // in minutes
  maxAttempts     Int           @default(1)
  passingScore    Int?
  isActive        Boolean       @default(true)
  createdBy       User          @relation("ExamCreator", fields: [createdById], references: [id])
  createdById     Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  sections        Section[]
  attempts        ExamAttempt[]
  tags            ExamTag[]

  @@map("exams")
}

model Section {
  id          Int         @id @default(autoincrement())
  exam        Exam        @relation(fields: [examId], references: [id])
  examId      Int
  title       String
  description String?
  timeLimit   Int?        // in minutes
  sectionOrder Int
  isRequired  Boolean     @default(true)
  questions   Question[]

  @@map("sections")
}

enum QuestionType {
  MULTIPLE_CHOICE
  CODING
  TEXT_INPUT
}

model Question {
  id          Int               @id @default(autoincrement())
  section     Section           @relation(fields: [sectionId], references: [id])
  sectionId   Int
  type        QuestionType
  content     String
  points      Int               @default(1)
  isRequired  Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  options     QuestionOption[]
  codingDetail CodingQuestion?
  answers     UserAnswer[]

  @@map("questions")
}

model QuestionOption {
  id          Int       @id @default(autoincrement())
  question    Question  @relation(fields: [questionId], references: [id])
  questionId  Int
  optionText  String
  isCorrect   Boolean   @default(false)
  optionOrder Int

  @@map("question_options")
}

model CodingQuestion {
  question            Question  @relation(fields: [questionId], references: [id])
  questionId          Int       @id
  initialCode         String?
  testCases          Json?
  programmingLanguage String?
  timeLimit          Int?      // in seconds

  @@map("coding_questions")
}

model ExamAttempt {
  id          Int          @id @default(autoincrement())
  user        User         @relation(fields: [userId], references: [id])
  userId      Int
  exam        Exam         @relation(fields: [examId], references: [id])
  examId      Int
  startTime   DateTime     @default(now())
  endTime     DateTime?
  score       Float?
  status      String       @default("in_progress") // in_progress, completed, abandoned
  answers     UserAnswer[]

  @@unique([userId, examId, startTime])
  @@map("exam_attempts")
}

model UserAnswer {
  id            Int         @id @default(autoincrement())
  attempt       ExamAttempt @relation(fields: [attemptId], references: [id])
  attemptId     Int
  question      Question    @relation(fields: [questionId], references: [id])
  questionId    Int
  answerText    String?
  isCorrect     Boolean?
  pointsEarned  Float?
  submittedAt   DateTime    @default(now())

  @@map("user_answers")
}

model Tag {
  id    Int       @id @default(autoincrement())
  name  String    @unique
  exams ExamTag[]

  @@map("tags")
}

model ExamTag {
  exam    Exam     @relation(fields: [examId], references: [id])
  examId  Int
  tag     Tag      @relation(fields: [tagId], references: [id])
  tagId   Int

  @@id([examId, tagId])
  @@map("exam_tags")
}